import boto3
import json
import os
from datetime import datetime, timezone

def lambda_handler(event, context):
    try:
        # Get instance ID directly from event
        instance_id = event['instance_id']
        
        # Initialize AWS clients
        ec2 = boto3.client('ec2')
        iam = boto3.client('iam')
        sns = boto3.client('sns')

        # Step 1: Create forensic snapshot WHILE INSTANCE IS RUNNING
        snapshot_id = create_forensic_snapshot(ec2, instance_id)

        # Step 2: Remove IAM instance profile
        remove_instance_profile(ec2, iam, instance_id)

        # Step 3: Move to isolation security group
        move_to_isolation(ec2, instance_id)

        incident_details = {
            'instance_id': instance_id,
            'snapshot_id': snapshot_id,
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'actions_taken': [
                'Created forensic snapshot of running instance',
                'Removed IAM instance profile', 
                'Moved to isolation security group - instance remains running for memory forensics'
            ]
        }

        # Step 4: Notify security team
        notify_security_team(sns, incident_details)

        return {
            'statusCode': 200,
            'body': json.dumps(incident_details)
        }

    except Exception as e:
        print(f"Error during containment process: {str(e)}")
        raise e

def create_forensic_snapshot(ec2_client, instance_id):
    response = ec2_client.describe_instances(InstanceIds=[instance_id])
    volume_id = response['Reservations'][0]['Instances'][0]['BlockDeviceMappings'][0]['Ebs']['VolumeId']
    
    snapshot = ec2_client.create_snapshot(
        VolumeId=volume_id,
        Description=f'Forensic snapshot of running instance {instance_id}',
        TagSpecifications=[{
            'ResourceType': 'snapshot',
            'Tags': [
                {'Key': 'Purpose', 'Value': 'Forensics'},
                {'Key': 'SourceInstance', 'Value': instance_id},
                {'Key': 'CreationTime', 'Value': datetime.now(timezone.utc).isoformat()}
            ]
        }]
    )
    return snapshot['SnapshotId']

def remove_instance_profile(ec2_client, iam_client, instance_id):
    response = ec2_client.describe_iam_instance_profile_associations(
        Filters=[{'Name': 'instance-id', 'Values': [instance_id]}]
    )
    
    if response['IamInstanceProfileAssociations']:
        association_id = response['IamInstanceProfileAssociations'][0]['AssociationId']
        ec2_client.disassociate_iam_instance_profile(AssociationId=association_id)

def move_to_isolation(ec2_client, instance_id):
    ISOLATION_SG = os.environ['ISOLATION_SECURITY_GROUP_ID']
    
    ec2_client.modify_instance_attribute(
        InstanceId=instance_id,
        Groups=[ISOLATION_SG]
    )

def notify_security_team(sns_client, incident_details):
    sns_client.publish(
        TopicArn=os.environ['SECURITY_TEAM_SNS_TOPIC'],
        Subject=f"CRITICAL: Security Incident - Instance {incident_details['instance_id']}",
        Message=json.dumps(incident_details, indent=2)
    )
