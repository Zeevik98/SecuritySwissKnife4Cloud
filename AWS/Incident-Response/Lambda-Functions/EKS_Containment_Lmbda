import boto3
import json
import os
from datetime import datetime, timezone
import base64
from botocore.exceptions import ClientError
from kubernetes import client, config

def lambda_handler(event, context):
   try:
       # Get EKS details from event
       cluster_name = event['cluster_name']
       namespace = event['namespace']
       pod_name = event.get('pod_name')  # Optional
       node_name = event.get('node_name')  # Optional
       
       # Initialize AWS clients
       eks = boto3.client('eks')
       ec2 = boto3.client('ec2')
       iam = boto3.client('iam')
       sns = boto3.client('sns')

       # Step 1: Get cluster credentials and configure kubernetes client
       configure_k8s_client(eks, cluster_name)

       # Step 2: Document initial state
       initial_state = document_cluster_state(cluster_name, namespace, pod_name, node_name)

       # Step 3: Handle pod isolation if specified
       pod_actions = []
       if pod_name:
           pod_actions = isolate_pod(namespace, pod_name)

       # Step 4: Handle node isolation if specified
       node_actions = []
       if node_name:
           node_actions = isolate_node(node_name, ec2)

       # Step 5: Remove service account permissions
       sa_actions = remove_service_account_permissions(namespace)

       incident_details = {
           'cluster_name': cluster_name,
           'namespace': namespace,
           'pod_name': pod_name,
           'node_name': node_name,
           'timestamp': datetime.now(timezone.utc).isoformat(),
           'initial_state': initial_state,
           'actions_taken': pod_actions + node_actions + sa_actions
       }

       # Step 6: Upload forensic data
       upload_forensic_data(incident_details)

       # Step 7: Notify security team
       notify_security_team(sns, incident_details)

       return {
           'statusCode': 200,
           'body': json.dumps(incident_details)
       }

   except Exception as e:
       print(f"Error during EKS containment process: {str(e)}")
       raise e

def configure_k8s_client(eks_client, cluster_name):
   """Configures kubernetes client with cluster credentials"""
   try:
       cluster_info = eks_client.describe_cluster(name=cluster_name)
       configuration = client.Configuration()
       configuration.host = cluster_info['cluster']['endpoint']
       configuration.verify_ssl = True
       configuration.ssl_ca_cert = base64.b64decode(cluster_info['cluster']['certificateAuthority']['data'])
       configuration.api_key = [get_cluster_auth_token(cluster_name)]
       client.Configuration.set_default(configuration)
   except ClientError as e:
       print(f"Error configuring k8s client: {str(e)}")
       raise e

def document_cluster_state(cluster_name, namespace, pod_name=None, node_name=None):
   """Documents current state of affected resources"""
   v1 = client.CoreV1Api()
   rbac = client.RbacAuthorizationV1Api()
   
   state = {
       'namespace_info': v1.read_namespace(namespace).to_dict(),
       'service_accounts': v1.list_namespaced_service_account(namespace).to_dict(),
       'roles': rbac.list_namespaced_role(namespace).to_dict(),
       'role_bindings': rbac.list_namespaced_role_binding(namespace).to_dict()
   }
   
   if pod_name:
       state['pod_info'] = v1.read_namespaced_pod(pod_name, namespace).to_dict()
   
   if node_name:
       state['node_info'] = v1.read_node(node_name).to_dict()
   
   return state

def isolate_pod(namespace, pod_name):
   """Isolates pod through network policies and labels"""
   v1 = client.CoreV1Api()
   networking = client.NetworkingV1Api()
   
   actions = []

   # Apply isolation label
   body = {
       'metadata': {
           'labels': {
               'security-isolation': 'active'
           }
       }
   }
   v1.patch_namespaced_pod(pod_name, namespace, body)
   actions.append('Applied isolation label to pod')

   # Create network policy for isolation
   policy = {
       'apiVersion': 'networking.k8s.io/v1',
       'kind': 'NetworkPolicy',
       'metadata': {
           'name': f'isolate-{pod_name}',
           'namespace': namespace
       },
       'spec': {
           'podSelector': {
               'matchLabels': {
                   'security-isolation': 'active'
               }
           },
           'policyTypes': ['Ingress', 'Egress'],
           'ingress': [],
           'egress': []
       }
   }
   networking.create_namespaced_network_policy(namespace, policy)
   actions.append('Created isolation network policy')
   
   return actions

def isolate_node(node_name, ec2_client):
   """Isolates node through AWS security groups"""
   actions = []
   
   try:
       # Get node instance ID
       v1 = client.CoreV1Api()
       node = v1.read_node(node_name)
       instance_id = node.spec.provider_id.split('/')[-1]

       # Apply isolation security group
       ec2_client.modify_instance_attribute(
           InstanceId=instance_id,
           Groups=[os.environ['ISOLATION_SECURITY_GROUP_ID']]
       )
       actions.append(f'Applied isolation security group to node {node_name}')
       
       # Cordon node to prevent new pods
       body = {
           'spec': {
               'unschedulable': True
           }
       }
       v1.patch_node(node_name, body)
       actions.append(f'Cordoned node {node_name}')
       
   except Exception as e:
       print(f"Error isolating node: {str(e)}")
       actions.append(f'Failed to isolate node: {str(e)}')
   
   return actions

def remove_service_account_permissions(namespace):
   """Removes permissions from service accounts in namespace"""
   rbac = client.RbacAuthorizationV1Api()
   actions = []
   
   try:
       # Remove role bindings
       role_bindings = rbac.list_namespaced_role_binding(namespace)
       for binding in role_bindings.items:
           rbac.delete_namespaced_role_binding(binding.metadata.name, namespace)
           actions.append(f'Removed role binding {binding.metadata.name}')
           
   except Exception as e:
       print(f"Error removing service account permissions: {str(e)}")
       actions.append(f'Failed to remove some permissions: {str(e)}')
   
   return actions

def upload_forensic_data(incident_details):
   """Uploads incident details to forensics bucket"""
   s3 = boto3.client('s3')
   
   s3.put_object(
       Bucket=os.environ['FORENSICS_BUCKET'],
       Key=f"eks_incidents/{incident_details['cluster_name']}/{incident_details['namespace']}/{datetime.now(timezone.utc).isoformat()}.json",
       Body=json.dumps(incident_details, indent=2),
       ServerSideEncryption='aws:kms',
       SSEKMSKeyId=os.environ['KMS_KEY_ID']
   )

def notify_security_team(sns_client, incident_details):
   """Notifies security team with incident details"""
   sns_client.publish(
       TopicArn=os.environ['SECURITY_TEAM_SNS_TOPIC'],
       Subject=f"CRITICAL: EKS Security Incident - Cluster {incident_details['cluster_name']}",
       Message=json.dumps(incident_details, indent=2)
   )
